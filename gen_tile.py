import numpy as np
import os
import argparse
import shutil
import csv
from scipy.spatial.transform import Rotation as R

def generate_tile_with_materials(side_length, family_dir, output_dir):
    family_name = os.path.basename(os.path.normpath(family_dir))
    tile_name = f'tile_{family_name}_{side_length}'

    # Ensure the output directory exists
    output_dir = os.path.join(output_dir, tile_name)
    os.makedirs(output_dir, exist_ok=True)

    obj_file = os.path.join(output_dir, f'{tile_name}.obj')
    mtl_file = os.path.join(output_dir, f'{tile_name}.mtl')
    csv_file = os.path.join(output_dir, f'{tile_name}.csv')

    # Define the thin side width
    thin_side_width = 0.001

    # Define vertices of the tile
    half_side = side_length / 2.0
    half_thin_side = thin_side_width / 2.0
    vertices = np.array([
        [half_side, half_side, -half_thin_side],   # 0
        [half_side, -half_side, -half_thin_side],  # 1
        [-half_side, -half_side, -half_thin_side], # 2
        [-half_side, half_side, -half_thin_side],  # 3
        [half_side, half_side, half_thin_side],    # 4
        [half_side, -half_side, half_thin_side],   # 5
        [-half_side, -half_side, half_thin_side],  # 6
        [-half_side, half_side, half_thin_side]    # 7
    ])

    # Define faces of the tile (two triangles per face)
    faces = np.array([
        [0, 1, 2, 3],  # front
        [4, 5, 6, 7],  # back
        [0, 1, 5, 4],  # top
        [1, 2, 6, 5],  # bottom
        [2, 3, 7, 6],  # left
        [3, 0, 4, 7]   # right
    ])

    triangles = []
    for face in faces:
        triangles.append([face[0], face[1], face[2]])
        triangles.append([face[2], face[3], face[0]])

    # List texture files in the specified directory
    texture_files = [f for f in os.listdir(family_dir) if f.endswith('.png') and os.path.basename(f).startswith('tag')]
    if len(texture_files) < 2:
        raise ValueError("At least 2 textures are needed in the directory.")

    texture_filenames = [os.path.splitext(f)[0] for f in texture_files]
    texture_idx = [int(f.split('_')[-1]) for f in texture_filenames]
    sorted_texture_files = [f for _, f in sorted(zip(texture_idx, texture_files))]

    # Copy textures to the output directory
    for texture_file in sorted_texture_files[:2]:
        src = os.path.join(family_dir, texture_file)
        dst = os.path.join(output_dir, texture_file)
        shutil.copy(src, dst)  # Use shutil to copy the file

    # Write MTL file
    with open(mtl_file, 'w') as f:
        # Write material for textures
        for i, texture_file in enumerate(sorted_texture_files[:2]):
            f.write(f"newmtl material_{i}\n")
            f.write(f"Ka 0.8 0.8 0.8\n")  # Ambient color for paper-like material
            f.write(f"Kd 1.0 1.0 1.0\n")  # Diffuse color (white)
            f.write(f"Ks 0.0 0.0 0.0\n")  # Specular color (no specular reflection)
            f.write(f"Tr 1.0\n")  # Transparency (fully opaque)
            f.write(f"illum 2\n")  # Illumination model (basic lighting model)
            f.write(f"Ns 0.0\n")  # Shininess (none)
            f.write(f"map_Kd {texture_file}\n\n")
        
        # Write material for white color
        f.write(f"newmtl white_material\n")
        f.write(f"Ka 0.8 0.8 0.8\n")  # Ambient color for paper-like material
        f.write(f"Kd 1.0 1.0 1.0\n")  # Diffuse color (white)
        f.write(f"Ks 0.0 0.0 0.0\n")  # Specular color (no specular reflection)
        f.write(f"Tr 1.0\n")  # Transparency (fully opaque)
        f.write(f"illum 2\n")  # Illumination model (basic lighting model)
        f.write(f"Ns 0.0\n")  # Shininess (none)
    print(f"MTL file saved to {mtl_file}")

    # Write OBJ file
    with open(obj_file, 'w') as f:
        f.write("# OBJ File Generated by Python Script\n")
        f.write(f"# Vertices: {len(vertices)}\n")
        f.write(f"# Faces: {len(triangles)}\n")
        f.write(f"\nmtllib {os.path.basename(mtl_file)}\n\n")

        # Write vertices
        for vertex in vertices:
            f.write(f"v {' '.join(map(str, vertex))}\n")

        f.write("\n")

        # Write texture coordinates (covering full texture per face)
        texture_coords = np.array([
            [0.0, 0.0],
            [1.0, 0.0],
            [1.0, 1.0],
            [0.0, 1.0]
        ])

        for vt in texture_coords:
            f.write(f"vt {' '.join(map(str, vt))}\n")

        f.write("\n")

        # Write faces with materials and texture coordinates
        face_vt_map = [
            [1, 2, 3],
            [3, 4, 1]
        ]

        for i in range(6):
            if i < 2:  # First two faces with textures
                f.write(f"usemtl material_{i}\n")
            else:  # Other four faces with white material
                f.write("usemtl white_material\n")
                
            for j in range(2):
                triangle_idx = 2 * i + j
                triangle_face = triangles[triangle_idx]
                face_txt = []
                for k, v in enumerate(triangle_face):
                    face_txt.append(f"{v+1}/{face_vt_map[j][k]}")
                f.write(f"f {' '.join(face_txt)}\n")
            f.write("\n")

    print(f"OBJ file saved to {obj_file}")

    # Calculate transformations and save to CSV
    face_centers = {
        0: [0, 0, -half_thin_side],  # front
        1: [0, 0, half_thin_side]    # back
    }

    rotations = {
        0: [0, 0, 0, 1],                         # front
        1: [0, 0, 1, 0]                          # back
    }

    with open(csv_file, 'w', newline='') as csvfile:
        fieldnames = ['face_idx', 'translation_x', 'translation_y', 'translation_z', 'rotation_w', 'rotation_x', 'rotation_y', 'rotation_z']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()

        for idx in range(2):  # Only for the textured faces
            translation = face_centers[idx]
            rotation = rotations[idx]
            writer.writerow({
                'face_idx': idx,
                'translation_x': translation[0],
                'translation_y': translation[1],
                'translation_z': translation[2],
                'rotation_w': rotation[3],
                'rotation_x': rotation[0],
                'rotation_y': rotation[1],
                'rotation_z': rotation[2]
            })

    print(f"CSV file saved to {csv_file}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Generate a 3D tile with textures and save transformations to CSV.")
    parser.add_argument("side_length", type=float, help="The length of the tile's side.")
    parser.add_argument("family_dir", type=str, help="Directory containing texture files.")
    parser.add_argument("output_dir", type=str, help="Directory to save the output files.")

    args = parser.parse_args()

    generate_tile_with_materials(args.side_length, args.family_dir, args.output_dir)
