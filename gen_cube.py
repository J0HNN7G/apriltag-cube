import numpy as np
import os
import argparse
import shutil

def generate_cube_with_materials(side_length, family_dir, output_dir):
    family_name = os.path.basename(os.path.normpath(family_dir))
    cube_name = f'cube_{family_name}_{side_length}'

    # Ensure the output directory exists
    output_dir = os.path.join(output_dir, cube_name)
    os.makedirs(output_dir, exist_ok=True)

    obj_file = os.path.join(output_dir, f'{cube_name}.obj')
    mtl_file = os.path.join(output_dir, f'{cube_name}.mtl')
    glb_file = os.path.join(output_dir, f'{cube_name}.glb')

    # Define vertices of the cube
    half_side = side_length / 2.0
    vertices = np.array([
        [half_side, half_side, -half_side],
        [half_side, -half_side, -half_side],
        [-half_side, -half_side, -half_side],
        [-half_side, half_side, -half_side],
        [half_side, half_side, half_side],
        [half_side, -half_side, half_side],
        [-half_side, -half_side, half_side],
        [-half_side, half_side, half_side]
    ])

    # Define faces of the cube (one face per material)
    faces = np.array([
        [0, 1, 2, 3],  # front
        [4, 5, 6, 7],  # back
        [0, 1, 5, 4],  # top
        [1, 2, 6, 5],  # bottom
        [2, 3, 7, 6],  # left
        [3, 0, 4, 7]   # right
    ])

    # Define normals for each face
    normals = np.array([
        [0, 0, -1],  # front
        [0, 0, 1],   # back
        [0, 1, 0],   # top
        [0, -1, 0],  # bottom
        [-1, 0, 0],  # left
        [1, 0, 0]    # right
    ])

    # List texture files in the specified directory
    texture_files = [f for f in os.listdir(family_dir) if f.endswith('.png') and os.path.basename(f).startswith('tag')]
    if len(texture_files) < 6:
        raise ValueError("At least 6 textures are needed in the directory.")

    texture_filenames = [os.path.splitext(f)[0] for f in texture_files]
    texture_idx = [int(f.split('_')[-1]) for f in texture_filenames]
    sorted_texture_files = [f for _, f in sorted(zip(texture_idx, texture_files))]

    # Copy textures to the output directory
    for texture_file in sorted_texture_files[:6]:
        src = os.path.join(family_dir, texture_file)
        dst = os.path.join(output_dir, texture_file)
        shutil.copy(src, dst)  # Use shutil to copy the file

    # Write MTL file
    with open(mtl_file, 'w') as f:
        for i, texture_file in enumerate(sorted_texture_files[:6]):
            f.write(f"newmtl material_{i}\n")
            f.write(f"Ka 0.8 0.8 0.8\n")  # Ambient color for paper-like material
            f.write(f"Kd 1.0 1.0 1.0\n")  # Diffuse color (white)
            f.write(f"Ks 0.0 0.0 0.0\n")  # Specular color (no specular reflection)
            f.write(f"Tr 1.0\n")  # Transparency (fully opaque)
            f.write(f"illum 2\n")  # Illumination model (basic lighting model)
            f.write(f"Ns 0.0\n")  # Shininess (none)
            f.write(f"map_Kd {texture_file}\n\n")
    print(f"MTL file saved to {mtl_file}")

    # Write OBJ file
    with open(obj_file, 'w') as f:
        f.write("# OBJ File Generated by Python Script\n")
        f.write(f"# Vertices: {len(vertices)}\n")
        f.write(f"# Normals: {len(normals)}\n")
        f.write(f"# Faces: {len(faces)}\n")
        f.write(f"\nmtllib {os.path.basename(mtl_file)}\n\n")

        # Write vertices
        for vertex in vertices:
            f.write(f"v {' '.join(map(str, vertex))}\n")

        f.write("\n")

        # Write normals
        for normal in normals:
            f.write(f"vn {' '.join(map(str, normal))}\n")

        f.write("\n")

        # Write texture coordinates (covering full texture per face)
        texture_coords = np.array([
            [0.0, 0.0],
            [1.0, 0.0],
            [1.0, 1.0],
            [0.0, 1.0]
        ])

        for vt in texture_coords:
            f.write(f"vt {' '.join(map(str, vt))}\n")

        f.write("\n")

        # Write faces with materials and normals
        for i, face in enumerate(faces):
            f.write(f"usemtl material_{i}\n")
            face_txt = []
            for j, v in enumerate(face):
                face_txt.append(f"{v+1}/{(j % 4) + 1}/{i+1}")
            f.write(f"f {' '.join(face_txt)}\n")
            f.write("\n")
    print(f"OBJ file saved to {obj_file}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Generate a cube with textures and convert to GLB.")
    parser.add_argument("side_length", type=float, help="The length of the cube's side.")
    parser.add_argument("family_dir", type=str, help="Directory containing texture files.")
    parser.add_argument("output_dir", type=str, help="Directory to save the output files.")

    args = parser.parse_args()

    generate_cube_with_materials(args.side_length, args.family_dir, args.output_dir)
